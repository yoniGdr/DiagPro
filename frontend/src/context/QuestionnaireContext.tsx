// üéØ Contexte global qui g√®re l'√©tat du questionnaire : 
// - Suivi de la question actuelle
// - Enregistrement des r√©ponses
// - Navigation entre les questions
// - R√©initialisation compl√®te du questionnaire

import { createContext, useState, ReactNode } from "react";
import questionsData from "../data/questions.json";

// Repr√©sente une option de r√©ponse possible pour une question
interface Option {
  label: string;
  value: string;
  nextQuestionId?: string;
}
// Repr√©sente une question du questionnaire
interface Question {
  id: string;
  label: string;
  type: string;
  options: Option[];
}
// Repr√©sente la r√©ponse donn√©e par l'utilisateur √† une question
interface Answer {
  questionId: string;
  answer: string;
}
// D√©finition de la forme que prendra notre contexte
interface QuestionnaireContextType {
  currentQuestion: Question | null;
  answers: Answer[];
  goToNextQuestion: (selectedOption: Option) => void;
  goBack: () => void;
  reset: () => void;
}

// Cr√©ation du contexte Questionnaire avec TypeScript
export const QuestionnaireContext = createContext<QuestionnaireContextType | undefined>(undefined);

// Fournisseur (Provider) qui va englober toute l'application et g√©rer l'√©tat du questionnaire
export const QuestionnaireProvider = ({ children }: { children: ReactNode }) => {
  const [answers, setAnswers] = useState<Answer[]>([]); // Liste des r√©ponses donn√©es par l'utilisateur
  const [history, setHistory] = useState<Question[]>([]); // Historique des questions pour pouvoir revenir en arri√®re
  const [currentQuestion, setCurrentQuestion] = useState<Question | null>( // Question actuellement affich√©e √† l'utilisateur
    questionsData.find(q => q.id === "q__0") || null
  );
  // Fonction pour enregistrer une r√©ponse et passer √† la prochaine question
  const goToNextQuestion = (selectedOption: Option) => {
    if (!currentQuestion) return;

    // Ajoute la r√©ponse actuelle
    setAnswers(prev => [...prev, { questionId: currentQuestion.id, answer: selectedOption.value }]);
    // Ajoute la question actuelle √† l'historique pour pouvoir revenir en arri√®re
    setHistory(prev => [...prev, currentQuestion]);

    // Cherche la prochaine question selon l'option s√©lectionn√©e
    const nextId = selectedOption.nextQuestionId;
    if (nextId) {
      const nextQuestion = questionsData.find(q => q.id === nextId);
      setCurrentQuestion(nextQuestion || null);
    } else {
      // Pas de nextQuestionId => Fin du questionnaire
      setCurrentQuestion(null);
    }
  };
  // Fonction pour revenir √† la question pr√©c√©dente
  const goBack = () => {
    if (history.length === 0) return;
    const previousQuestion = history[history.length - 1]; // R√©cup√®re la derni√®re question de l'historique

    setHistory(prev => prev.slice(0, -1)); // Supprime la derni√®re question de l'historique
    setCurrentQuestion(previousQuestion); // Met √† jour la question actuelle

    setAnswers(prev => prev.slice(0, -1)); // Supprime la derni√®re r√©ponse donn√©e
  };
  // Fonction pour r√©initialiser compl√®tement le questionnaire (utilis√©e apr√®s un envoi ou lors d'un recommencement)
  const reset = () => {
    setAnswers([]);
    setHistory([]);
    setCurrentQuestion(questionsData.find(q => q.id === "q__0") || null);
  };
  // Expose les donn√©es et actions du questionnaire aux autres composants via le contexte
  return (
    <QuestionnaireContext.Provider
      value={{ currentQuestion, answers, goToNextQuestion, goBack, reset }}
    >
      {children}
    </QuestionnaireContext.Provider>
  );
};



